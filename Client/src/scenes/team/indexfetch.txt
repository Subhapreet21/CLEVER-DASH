import React, { useEffect, useState, useMemo } from "react";
import { Box, Button, Dialog, DialogTitle, DialogContent } from "@mui/material";
import { DataGrid, GridToolbar } from "@mui/x-data-grid";
import { useTheme } from "@mui/material/styles";
import { tokens } from "../../theme";

import * as yup from "yup";
import { Formik, Form, Field, ErrorMessage } from "formik";
import Header from "../../components/Header";

const validationSchema = yup.object().shape({
  name: yup.string().required("Required"),
  age: yup.number().required("Required").positive().integer(),
  phone: yup
    .string()
    .required("Required")
    .matches(/^[0-9]{10}$/, "Invalid phone number"),
  email: yup.string().required("Required").email("Invalid email"),
  accessLevel: yup.string().required("Required"),
});

const Team = () => {
  const [team, setTeam] = useState([]);
  const [open, setOpen] = useState(false);
  const [currentMember, setCurrentMember] = useState(null);
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  const fetchTeamData = async () => {
    try {
      const response = await fetch("http://localhost:3547/mockDataTeam");
      const data = await response.json();
      setTeam(data);
    } catch (error) {
      console.error("Failed to fetch team data:", error.message);
    }
  };

  const handleAdd = () => {
    setCurrentMember(null);
    setOpen(true);
  };

  const handleEdit = (id) => {
    const member = team.find((member) => member.id === id);
    setCurrentMember(member);
    setOpen(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm("Do you want to delete this member?")) {
      try {
        const response = await fetch(
          `http://localhost:3547/mockDataTeam/${id}`,
          {
            method: "DELETE",
          }
        );

        if (!response.ok) {
          const error = await response.json();
          return alert(error.error);
        }

        const result = await response.json();
        alert("Employee deleted successfully.");
        setTeam((prevTeam) => prevTeam.filter((member) => member.id !== id));
      } catch (error) {
        console.error("Failed to delete member:", error.message);
      }
    }
  };

  const handleClose = () => {
    setOpen(false);
    setCurrentMember(null);
  };

  const handleFormSubmit = async (values, { resetForm }) => {
    if (currentMember) {
      try {
        const response = await fetch(
          `http://localhost:3547/mockDataTeam/${currentMember.id}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(values),
          }
        );

        if (!response.ok) {
          throw new Error("Failed to update employee");
        }

        const updatedMember = await response.json();
        setTeam((prevTeam) =>
          prevTeam.map((member) =>
            member.id === currentMember.id ? updatedMember : member
          )
        );
        alert("Employee updated successfully");
      } catch (error) {
        console.error("Failed to update employee:", error.message);
        alert("Failed to update employee");
      }
    } else {
      try {
        const response = await fetch("http://localhost:3547/mockDataTeam", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(values),
        });

        if (!response.ok) {
          throw new Error("Failed to add employee");
        }

        const newMember = await response.json();
        setTeam((prevTeam) => [...prevTeam, newMember]);
        alert("Employee added successfully");
      } catch (error) {
        console.error("Failed to add employee:", error.message);
        alert("Failed to add employee");
      }
    }

    handleClose();
    resetForm();
  };

  useEffect(() => {
    fetchTeamData();
  }, []);

  const columns = useMemo(
    () => [
      { field: "id", headerName: "ID", flex: 1 },
      { field: "name", headerName: "Name", flex: 1 },
      { field: "age", headerName: "Age", flex: 1 },
      { field: "phone", headerName: "Phone", flex: 1 },
      { field: "email", headerName: "Email", flex: 1 },
      { field: "accessLevel", headerName: "Access Level", flex: 1 },
      {
        field: "actions",
        headerName: "Actions",
        flex: 1,
        renderCell: (params) => (
          <>
            <Button
              variant="contained"
              onClick={() => handleEdit(params.row.id)}
              sx={{
                backgroundColor: colors.blueAccent[700],
                color: colors.grey[100],
                fontSize: "10px",
                fontWeight: "bold",
                padding: "7px 7px",
                margin: "3px",
              }}
            >
              Edit
            </Button>
            <Button
              variant="contained"
              onClick={() => handleDelete(params.row.id)}
              sx={{
                backgroundColor: colors.blueAccent[700],
                color: colors.grey[100],
                fontSize: "10px",
                fontWeight: "bold",
                padding: "7px 7px",
                margin: "3px",
              }}
            >
              Delete
            </Button>
          </>
        ),
      },
    ],
    [colors, handleEdit, handleDelete]
  );

  return (
    <Box m="10px">
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Header title="TEAM" subtitle="Managing the Team Members" />
        <Button
          variant="contained"
          color="primary"
          onClick={handleAdd}
          sx={{
            backgroundColor: colors.blueAccent[700],
            color: colors.grey[100],
            fontSize: "14px",
            fontWeight: "bold",
            padding: "10px 20px",
          }}
        >
          Add Member
        </Button>
      </Box>
      <Box
        m="40px 0 0 0"
        height="75vh"
        sx={{
          "& .MuiDataGrid-root": {
            border: "none",
          },
          "& .MuiDataGrid-cell": {
            borderBottom: "none",
          },
          "& .MuiDataGrid-columnHeaders": {
            backgroundColor: colors.blueAccent[700],
            borderBottom: "none",
          },
          "& .MuiDataGrid-virtualScroller": {
            backgroundColor: colors.primary[400],
          },
          "& .MuiDataGrid-footerContainer": {
            borderTop: "none",
            backgroundColor: colors.blueAccent[700],
          },
          "& .MuiCheckbox-root": {
            color: `${colors.greenAccent[200]} !important`,
          },
          "& .MuiDataGrid-toolbarContainer .MuiButton-text": {
            color: `${colors.grey[100]} !important`,
          },
        }}
      >
        <DataGrid
          rows={team}
          columns={columns}
          components={{ Toolbar: GridToolbar }}
        />
      </Box>
      <Dialog
        open={open}
        onClose={handleClose}
        PaperProps={{
          sx: {
            backgroundColor: "black",
            color: "#CECECE",
          },
        }}
      >
        <DialogTitle>
          {currentMember ? "Edit Member" : "Add Member"}
        </DialogTitle>
        <DialogContent>
          <Formik
            initialValues={
              currentMember || {
                id: "",
                name: "",
                age: "",
                phone: "",
                email: "",
                accessLevel: "",
              }
            }
            validationSchema={validationSchema}
            onSubmit={handleFormSubmit}
          >
            {({ handleSubmit }) => (
              <Form onSubmit={handleSubmit}>
                <div>
                  <label htmlFor="name">Name</label>
                  <Field id="name" name="name" placeholder="Name" />
                  <ErrorMessage name="name" component="div" />
                </div>
                <div>
                  <label htmlFor="age">Age</label>
                  <Field id="age" name="age" placeholder="Age" type="number" />
                  <ErrorMessage name="age" component="div" />
                </div>
                <div>
                  <label htmlFor="phone">Phone</label>
                  <Field id="phone" name="phone" placeholder="Phone" />
                  <ErrorMessage name="phone" component="div" />
                </div>
                <div>
                  <label htmlFor="email">Email</label>
                  <Field
                    id="email"
                    name="email"
                    placeholder="Email"
                    type="email"
                  />
                  <ErrorMessage name="email" component="div" />
                </div>
                <div>
                  <label htmlFor="accessLevel">Access Level</label>
                  <Field
                    id="accessLevel"
                    name="accessLevel"
                    placeholder="Access Level"
                  />
                  <ErrorMessage name="accessLevel" component="div" />
                </div>
                <Button type="submit" color="primary">
                  {currentMember ? "Update" : "Add"}
                </Button>
              </Form>
            )}
          </Formik>
        </DialogContent>
      </Dialog>
    </Box>
  );
};

export default Team;
